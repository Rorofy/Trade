#!/usr/bin/env python3

from os import close
import sys
import copy

previous = ""
btc_eth_move = "pass"
usd_eth_move = "pass"
usd_btc_move = "pass"
old_evo = []

class Settings:
    def __init__(self):
        self.player_names = ""
        self.your_bot = ""
        self.timebank = 0
        self.time_per_move = 0
        self.candle_interval = 0
        self.candle_format = []
        self.candles_total = 0
        self.candles_given = 0
        self.transaction_fee_percent = 0.0
        self.usd = 0.0
        self.btc = 0.0
        self.eth = 0.0
        self.volume_btc_eth = 0.0
        self.volume_usd_eth = 0.0
        self.volume_usd_btc = 0.0
        self.data = []

    def get_settings(self):
        try:
            for i in range(0, 10):
                temp = input()
                if (temp.split()[0] != "settings"):
                    sys.exit(84)
                if (i == 0): 
                    self.player_names = temp.split()[2]
                if (i == 1): 
                    self.your_bot = temp.split()[2]
                if (i == 2): 
                    self.timebank = int(temp.split()[2])
                if (i == 3): 
                    self.time_per_move = int(temp.split()[2])
                if (i == 4): 
                    self.candle_interval = int(temp.split()[2])
                if (i == 5):
                    self.candle_format = temp.split()[2].split(',')
                if (i == 6):
                    self.candles_total = int(temp.split()[2])
                if (i == 7):
                    self.candles_given = int(temp.split()[2])
                if (i == 8):
                    self.usd = float(temp.split()[2])
                if (i == 9):
                    self.transaction_fee_percent = float(temp.split()[2])
        except:
            sys.exit(84)

    def get_volume_mean(self):
        volume_index = 6
        try:
            for i in range(self.candles_given):
                update = input()
                update = update.split(';')
                for i in range(0, len(update)):
                    update[i] = update[i].split(',')

                for i in range(0, len(self.candle_format)):
                    if (self.candle_format[i] == "volume"):
                        volume_index = i
                self.volume_btc_eth += float(update[0][volume_index])
                self.volume_btc_eth /= 2
                self.volume_usd_eth += float(update[1][volume_index])
                self.volume_usd_eth /= 2
                self.volume_usd_btc += float(update[2][volume_index])
                self.volume_usd_btc /= 2
        except Exception as e:
            print(e)
            sys.exit(84)

def do_update(current, settings):
    global previous, btc_eth_move, usd_eth_move, usd_btc_move
    close_index = 5.0
    volume_index = 6.0
    open_index = 0
    med = 0

    if (current.split()[2] == "next_candles"):
        try:
            if (previous == ""):
                previous = current
                previous = previous.split(';')
                for i in range(0, len(previous)):
                    previous[i] = previous[i].split(',')
            current = current.split(';')
            for i in range(0, len(current)):
                current[i] = current[i].split(',')
            for i in range(0, len(settings.candle_format)):
                if (settings.candle_format[i] == "close"):
                    close_index = i
                if (settings.candle_format[i] == "volume"):
                    volume_index = i
            if (float(previous[0][close_index]) + (float(previous[0][close_index]) * 0.007)) < (float(current[0][close_index])) \
                and float(current[0][volume_index]) > (settings.volume_btc_eth + (settings.volume_btc_eth * 0.1)):
                btc_eth_move = "sell"
            elif (float(previous[0][close_index]) + (float(previous[0][close_index]) * 0.007)) > float(current[0][close_index]) \
                and float(current[0][volume_index]) > (settings.volume_btc_eth + (settings.volume_btc_eth * 0.1)):
                btc_eth_move = "buy"
            if (float(previous[1][close_index]) + (float(previous[1][close_index]) * 0.007)) < float(current[1][close_index]) \
                and float(current[1][volume_index]) > (settings.volume_usd_eth + (settings.volume_usd_eth * 0.1)):
                usd_btc_move = "sell"
            elif (float(previous[1][close_index]) + (float(previous[1][close_index]) * 0.007)) > float(current[1][close_index]) \
                and float(current[1][volume_index]) > (settings.volume_usd_eth + (settings.volume_usd_eth * 0.1)):
                usd_btc_move = "buy"
            if (float(previous[2][close_index]) + (float(previous[2][close_index]) * 0.007)) < float(current[2][close_index]) \
                and float(current[2][volume_index]) > (settings.volume_usd_btc * (settings.volume_usd_btc * 0.1)):
                usd_eth_move = "sell"
            elif (float(previous[2][close_index]) + (float(previous[2][close_index]) * 0.007)) > float(current[2][close_index]) \
                and float(current[2][volume_index]) > (settings.volume_usd_btc * (settings.volume_usd_btc * 0.1)):
                usd_eth_move = "buy"
            previous = current
        except Exception as e:
            print(e)
            sys.exit(84)
        return
    elif (current.split()[2] == "stacks"):
        tmp = current.split()[3].split(',')
        settings.btc = float(tmp[0][4:])
        settings.eth = float(tmp[1][4:])
        settings.usd = float(tmp[2][5:])
    else:
        print("Update arguments should be either next_candles or stacks")
        sys.exit(84)

def do_action(current, settings):
    global usd_btc_move, previous, old_evo, btc_eth_move, usd_eth_move
    order = 0

    if (settings.btc >= 0.000499):
        if (usd_btc_move == "sell" and settings.btc > 0):
            print("sell USDT_BTC %f;" % settings.btc)
            usd_btc_move = "pass"
            settings.btc = 0
            order = 1
        if (usd_eth_move == "sell" and settings.eth > 0):
            print("sell USDT_ETH %f;" % settings.eth)
            usd_eth_move = "pass"
            settings.eth = 0
            order = 1
        if (order != 1):
            print("pass")
    elif (settings.usd > 0.0005):
        if (usd_btc_move == "buy" and settings.usd >= 0.0005):
            print("buy USDT_BTC %f;" % 0.0005)
            usd_btc_move = "pass"
            settings.btc += 0.0005
            order = 1
        if (usd_eth_move == "buy" and settings.usd >= 0.0005):
            print("buy USDT_ETH %f;" % 0.0005)
            usd_eth_move = "pass"
            settings.eth += 0.0005
            order = 1
        if (order != 1):
            print("pass")
    else:
        print("pass")

def main():
    try:
        settings = Settings()
        settings.get_settings()
        settings.get_volume_mean()
        while (1):
            current = input()
            if (current == "end"):
                break
            elif (current.split()[0] == "update"):
                do_update(current, settings)
            elif (current.split()[0] == "action"):
                do_action(current, settings)
    except Exception as e:
        print(e)
        sys.exit(84)
    sys.exit(0)

main()